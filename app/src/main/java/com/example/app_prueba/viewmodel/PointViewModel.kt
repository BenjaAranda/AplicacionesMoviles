package com.example.app_prueba.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch

// --- 1. CLASES DE DATOS (El Estado de la UI) ---

data class PointUiState(
    // Resumen
    val currentLevel: String = "oro",
    val progress: Float = 0.8f,
    val pointsThisYear: Int = 980,
    val pointsAvailable: Int = 450,
    val pointsToCaducate: String = "30 (en 20 d칤as)",

    // Reglas (Est치tico, pero puede venir del VM)
    val rules: List<String> = listOf(
        "1 punto por cada \$1.000 gastado",
        "Los puntos se acreditan al despachar el producto"
    ),

    // Historial
    val historyFilters: List<String> = listOf("Todos", "Ganados", "Usados", "Anulados", "Expirados"),
    val selectedHistoryFilter: String = "Todos",
    val historyItems: List<HistoryItem> = emptyList(), // Se carga al iniciar

    // Beneficios
    val benefits: List<BenefitItem> = listOf(
        BenefitItem("游눶 Sistema de Descuentos", "Aprovecha precios exclusivos al canjear tus puntos."),
        BenefitItem("游꾹 Cup칩n de Cumplea침os", "Recibe un cup칩n especial con descuentos por tu cumplea침os."),
        BenefitItem("游뚴 Env칤o Gratis", "Obt칠n env칤o gratis en compras seleccionadas usando tus puntos.")
    ),

    // Tienda
    val rewards: List<RewardItem> = listOf(
        RewardItem("1", "Cup칩n \$5.000", "200 pts"),
        RewardItem("2", "Env칤o gratis", "150 pts"),
        RewardItem("3", "Terremot", "150 pts"),
        RewardItem("4", "Key Steam Random", "100 pts")
    )
)

// Clases auxiliares para el estado
data class HistoryItem(val id: String, val date: String, val event: String, val points: String, val expires: String, val isGain: Boolean)
data class BenefitItem(val title: String, val description: String)
data class RewardItem(val id: String, val name: String, val cost: String)


// --- 2. EL VIEWMODEL ---

class PointViewModel : ViewModel() {

    // Flujo de estado privado (Mutable) y p칰blico (StateFlow)
    private val _uiState = MutableStateFlow(PointUiState())
    val uiState: StateFlow<PointUiState> = _uiState.asStateFlow()

    // Datos "completos" que simular칤an venir de una base de datos o API
    private val allHistoryItems = listOf(
        HistoryItem("h1", "20/10/2025", "Compra #12345", "+150", "20/10/2026", true),
        HistoryItem("h2", "18/10/2025", "Canje Cup칩n", "-100", "-", false),
        HistoryItem("h3", "15/10/2025", "Compra #12300", "+50", "15/10/2026", true),
        HistoryItem("h4", "14/10/2025", "Anulaci칩n #12290", "-20", "-", false),
        HistoryItem("h5", "10/10/2025", "Puntos Expirados", "-10", "-", false)
    )

    init {
        // Carga el historial inicial (filtro "Todos")
        loadHistory(_uiState.value.selectedHistoryFilter)
    }

    // --- 3. MANEJADORES DE EVENTOS (L칩gica) ---

    /**
     * El usuario ha seleccionado un nuevo filtro en el historial.
     */
    fun onFilterSelected(filter: String) {
        // 1. Actualiza el estado con el filtro seleccionado
        _uiState.update { it.copy(selectedHistoryFilter = filter) }
        // 2. Carga los nuevos datos del historial
        loadHistory(filter)
    }

    /**
     * El usuario ha presionado el bot칩n "Canjear" en una recompensa.
     */
    fun onRedeemReward(rewardId: String) {
        // TODO: Implementar la l칩gica de canje (llamar a API, mostrar di치logo, etc.)
        println("Iniciando canje para la recompensa: $rewardId")
        // Ejemplo: podr칤as mostrar un di치logo y luego actualizar los puntos
        // _uiState.update { it.copy(pointsAvailable = it.pointsAvailable - 150) }
    }


    // --- 4. L칍GICA PRIVADA ---

    /**
     * Simula la carga de datos (filtrado) seg칰n el filtro seleccionado.
     * En una app real, esto ser칤a una consulta a la API o DB.
     */
    private fun loadHistory(filter: String) {
        viewModelScope.launch {
            // Simula una peque침a demora de red/DB
            // delay(300)

            val filteredList = when (filter) {
                "Ganados" -> allHistoryItems.filter { it.isGain }
                "Usados" -> allHistoryItems.filter { !it.isGain && it.points.startsWith("-") && it.event != "Anulaci칩n" && it.event != "Puntos Expirados" }
                "Anulados" -> allHistoryItems.filter { it.event.contains("Anulaci칩n", ignoreCase = true) }
                "Expirados" -> allHistoryItems.filter { it.event.contains("Expirados", ignoreCase = true) }
                "Todos" -> allHistoryItems
                else -> allHistoryItems
            }

            _uiState.update { it.copy(historyItems = filteredList) }
        }
    }
}
